
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftANDORleftEQNEleftGTEGTLTELTleftPLUSMINUSrightNOTleftMULTIPLYDIVIDEleftEXPONENTMODULUSAND BOOL BOOLNAME CHAR CHARNAME DEC DELIM DIVIDE DOT DOUBLE DOUBLENAME ELSE ELSEIF EQ EQUALS EXPONENT GT GTE IF INC INT INTNAME LCURLY LPAREN LT LTE MINUS MODULUS MULTIPLY NE NOT OR PLUS PRINT RCURLY RPAREN SEMICOLON STRING STRINGNAME STRUCT WORD\n        root    :   expression\n                |   statements\n                |   empty\n    \n        statements  :   statements statement SEMICOLON   \n                    |   statement SEMICOLON \n                    |   statements if\n                    |   if\n    \n        if   :   IF LPAREN expression RPAREN LCURLY statements RCURLY elseif else   \n    \n        elseif  :   ELSEIF LPAREN expression RPAREN LCURLY statements RCURLY elseif else\n                |   empty\n    \n        else    :   ELSE LCURLY statements RCURLY\n                |   empty\n    \n        statement   :   WORD DOT WORD EQUALS expression\n    \n        statement  : PRINT LPAREN print_list RPAREN\n    \n        print_list  : print_list DELIM expression\n    \n        print_list  : expression\n    \n        statement   :   WORD WORD\n    \n        statement   :   STRUCT WORD LCURLY var_decls RCURLY\n    \n        var_decls   :   var_decls var_declare\n                    |   var_declare\n    \n        statement   :   var_declare\n                    |   var_assign\n    \n        expression   :   LPAREN expression RPAREN\n    \n        var_assign  : var_declare EQUALS expression\n                    | WORD EQUALS expression\n    \n        var_declare :   INTNAME WORD \n                    |   DOUBLENAME WORD \n                    |   CHARNAME WORD \n                    |   STRINGNAME WORD \n                    |   BOOLNAME WORD \n    \n        expression  :   expression MULTIPLY expression\n                    |   expression DIVIDE expression\n                    |   expression PLUS expression\n                    |   expression MINUS expression\n                    |   expression EXPONENT expression\n                    |   expression MODULUS expression\n                    |   expression AND expression\n                    |   expression OR expression\n                    |   expression EQ expression\n                    |   expression NE expression\n                    |   expression LTE expression   \n                    |   expression GTE expression   \n                    |   expression GT expression   \n                    |   expression LT expression   \n    \n        expression  :   PLUS expression\n                    |   MINUS expression \n    \n        statement   :   expression INC\n                    |   expression DEC\n    \n        expression  :   NOT expression\n    \n        expression : WORD\n    \n        expression  :   INT\n                    |   DOUBLE\n                    |   CHAR\n                    |   STRING\n                    |   BOOL\n    \n        expression   :   WORD DOT WORD\n    \n    empty : \n    '
    
_lr_action_items = {'LPAREN':([0,3,5,6,7,8,16,17,21,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,54,55,56,58,59,79,92,94,102,103,104,105,106,107,108,110,111,112,114,116,117,118,119,120,121,],[5,5,5,5,5,5,-7,56,59,5,5,5,5,5,5,5,5,5,5,5,5,5,5,-6,5,-5,5,5,5,-4,5,5,5,5,-57,-57,111,-10,-8,-12,5,5,5,-11,5,5,-57,-57,-9,]),'PLUS':([0,2,3,5,6,7,8,9,10,11,12,13,14,16,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,45,46,47,48,49,50,51,54,55,56,58,59,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,84,86,88,89,90,91,92,94,98,99,102,103,104,105,107,108,110,111,112,113,114,116,117,118,119,120,121,],[6,29,6,6,6,6,6,-50,-51,-52,-53,-54,-55,-7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,-6,-50,29,29,-50,-45,-46,-49,6,-5,6,6,6,-31,-32,-33,-34,-35,-36,29,29,29,29,29,29,29,29,-4,-23,-56,29,29,29,29,-56,-56,6,6,29,29,6,6,-57,-57,-10,-8,-12,6,6,29,6,-11,6,6,-57,-57,-9,]),'MINUS':([0,2,3,5,6,7,8,9,10,11,12,13,14,16,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,45,46,47,48,49,50,51,54,55,56,58,59,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,84,86,88,89,90,91,92,94,98,99,102,103,104,105,107,108,110,111,112,113,114,116,117,118,119,120,121,],[7,30,7,7,7,7,7,-50,-51,-52,-53,-54,-55,-7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-6,-50,30,30,-50,-45,-46,-49,7,-5,7,7,7,-31,-32,-33,-34,-35,-36,30,30,30,30,30,30,30,30,-4,-23,-56,30,30,30,30,-56,-56,7,7,30,30,7,7,-57,-57,-10,-8,-12,7,7,30,7,-11,7,7,-57,-57,-9,]),'NOT':([0,3,5,6,7,8,16,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,54,55,56,58,59,79,92,94,102,103,104,105,107,108,110,111,112,114,116,117,118,119,120,121,],[8,8,8,8,8,8,-7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,-6,8,-5,8,8,8,-4,8,8,8,8,-57,-57,-10,-8,-12,8,8,8,-11,8,8,-57,-57,-9,]),'WORD':([0,3,5,6,7,8,9,16,18,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,45,53,54,55,56,58,59,79,80,82,92,94,102,103,104,105,107,108,110,111,112,114,116,117,118,119,120,121,],[9,45,48,48,48,48,52,-7,57,60,61,62,63,64,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-6,52,83,48,-5,48,48,48,-4,90,91,48,48,45,45,-57,-57,-10,-8,-12,48,45,45,-11,45,45,-57,-57,-9,]),'INT':([0,3,5,6,7,8,16,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,54,55,56,58,59,79,92,94,102,103,104,105,107,108,110,111,112,114,116,117,118,119,120,121,],[10,10,10,10,10,10,-7,10,10,10,10,10,10,10,10,10,10,10,10,10,10,-6,10,-5,10,10,10,-4,10,10,10,10,-57,-57,-10,-8,-12,10,10,10,-11,10,10,-57,-57,-9,]),'DOUBLE':([0,3,5,6,7,8,16,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,54,55,56,58,59,79,92,94,102,103,104,105,107,108,110,111,112,114,116,117,118,119,120,121,],[11,11,11,11,11,11,-7,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-6,11,-5,11,11,11,-4,11,11,11,11,-57,-57,-10,-8,-12,11,11,11,-11,11,11,-57,-57,-9,]),'CHAR':([0,3,5,6,7,8,16,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,54,55,56,58,59,79,92,94,102,103,104,105,107,108,110,111,112,114,116,117,118,119,120,121,],[12,12,12,12,12,12,-7,12,12,12,12,12,12,12,12,12,12,12,12,12,12,-6,12,-5,12,12,12,-4,12,12,12,12,-57,-57,-10,-8,-12,12,12,12,-11,12,12,-57,-57,-9,]),'STRING':([0,3,5,6,7,8,16,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,54,55,56,58,59,79,92,94,102,103,104,105,107,108,110,111,112,114,116,117,118,119,120,121,],[13,13,13,13,13,13,-7,13,13,13,13,13,13,13,13,13,13,13,13,13,13,-6,13,-5,13,13,13,-4,13,13,13,13,-57,-57,-10,-8,-12,13,13,13,-11,13,13,-57,-57,-9,]),'BOOL':([0,3,5,6,7,8,16,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,54,55,56,58,59,79,92,94,102,103,104,105,107,108,110,111,112,114,116,117,118,119,120,121,],[14,14,14,14,14,14,-7,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-6,14,-5,14,14,14,-4,14,14,14,14,-57,-57,-10,-8,-12,14,14,14,-11,14,14,-57,-57,-9,]),'$end':([0,1,2,3,4,9,10,11,12,13,14,16,44,48,49,50,51,55,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,91,104,105,107,108,110,116,119,120,121,],[-57,0,-1,-2,-3,-50,-51,-52,-53,-54,-55,-7,-6,-50,-45,-46,-49,-5,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-4,-23,-56,-56,-57,-57,-10,-8,-12,-11,-57,-57,-9,]),'PRINT':([0,3,16,44,55,79,102,103,104,105,107,108,110,112,114,116,117,118,119,120,121,],[17,17,-7,-6,-5,-4,17,17,-57,-57,-10,-8,-12,17,17,-11,17,17,-57,-57,-9,]),'STRUCT':([0,3,16,44,55,79,102,103,104,105,107,108,110,112,114,116,117,118,119,120,121,],[18,18,-7,-6,-5,-4,18,18,-57,-57,-10,-8,-12,18,18,-11,18,18,-57,-57,-9,]),'IF':([0,3,16,44,55,79,102,103,104,105,107,108,110,112,114,116,117,118,119,120,121,],[21,21,-7,-6,-5,-4,21,21,-57,-57,-10,-8,-12,21,21,-11,21,21,-57,-57,-9,]),'INTNAME':([0,3,16,44,55,60,61,62,63,64,79,87,95,96,101,102,103,104,105,107,108,110,112,114,116,117,118,119,120,121,],[22,22,-7,-6,-5,-26,-27,-28,-29,-30,-4,22,22,-20,-19,22,22,-57,-57,-10,-8,-12,22,22,-11,22,22,-57,-57,-9,]),'DOUBLENAME':([0,3,16,44,55,60,61,62,63,64,79,87,95,96,101,102,103,104,105,107,108,110,112,114,116,117,118,119,120,121,],[23,23,-7,-6,-5,-26,-27,-28,-29,-30,-4,23,23,-20,-19,23,23,-57,-57,-10,-8,-12,23,23,-11,23,23,-57,-57,-9,]),'CHARNAME':([0,3,16,44,55,60,61,62,63,64,79,87,95,96,101,102,103,104,105,107,108,110,112,114,116,117,118,119,120,121,],[24,24,-7,-6,-5,-26,-27,-28,-29,-30,-4,24,24,-20,-19,24,24,-57,-57,-10,-8,-12,24,24,-11,24,24,-57,-57,-9,]),'STRINGNAME':([0,3,16,44,55,60,61,62,63,64,79,87,95,96,101,102,103,104,105,107,108,110,112,114,116,117,118,119,120,121,],[25,25,-7,-6,-5,-26,-27,-28,-29,-30,-4,25,25,-20,-19,25,25,-57,-57,-10,-8,-12,25,25,-11,25,25,-57,-57,-9,]),'BOOLNAME':([0,3,16,44,55,60,61,62,63,64,79,87,95,96,101,102,103,104,105,107,108,110,112,114,116,117,118,119,120,121,],[26,26,-7,-6,-5,-26,-27,-28,-29,-30,-4,26,26,-20,-19,26,26,-57,-57,-10,-8,-12,26,26,-11,26,26,-57,-57,-9,]),'MULTIPLY':([2,9,10,11,12,13,14,45,46,47,48,49,50,51,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,83,84,86,88,89,90,91,98,99,113,],[27,-50,-51,-52,-53,-54,-55,-50,27,27,-50,27,27,27,-31,-32,27,27,-35,-36,27,27,27,27,27,27,27,27,-23,-56,27,27,27,27,-56,-56,27,27,27,]),'DIVIDE':([2,9,10,11,12,13,14,45,46,47,48,49,50,51,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,83,84,86,88,89,90,91,98,99,113,],[28,-50,-51,-52,-53,-54,-55,-50,28,28,-50,28,28,28,-31,-32,28,28,-35,-36,28,28,28,28,28,28,28,28,-23,-56,28,28,28,28,-56,-56,28,28,28,]),'EXPONENT':([2,9,10,11,12,13,14,45,46,47,48,49,50,51,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,83,84,86,88,89,90,91,98,99,113,],[31,-50,-51,-52,-53,-54,-55,-50,31,31,-50,31,31,31,31,31,31,31,-35,-36,31,31,31,31,31,31,31,31,-23,-56,31,31,31,31,-56,-56,31,31,31,]),'MODULUS':([2,9,10,11,12,13,14,45,46,47,48,49,50,51,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,83,84,86,88,89,90,91,98,99,113,],[32,-50,-51,-52,-53,-54,-55,-50,32,32,-50,32,32,32,32,32,32,32,-35,-36,32,32,32,32,32,32,32,32,-23,-56,32,32,32,32,-56,-56,32,32,32,]),'AND':([2,9,10,11,12,13,14,45,46,47,48,49,50,51,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,83,84,86,88,89,90,91,98,99,113,],[33,-50,-51,-52,-53,-54,-55,-50,33,33,-50,-45,-46,-49,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-23,-56,33,33,33,33,-56,-56,33,33,33,]),'OR':([2,9,10,11,12,13,14,45,46,47,48,49,50,51,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,83,84,86,88,89,90,91,98,99,113,],[34,-50,-51,-52,-53,-54,-55,-50,34,34,-50,-45,-46,-49,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-23,-56,34,34,34,34,-56,-56,34,34,34,]),'EQ':([2,9,10,11,12,13,14,45,46,47,48,49,50,51,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,83,84,86,88,89,90,91,98,99,113,],[35,-50,-51,-52,-53,-54,-55,-50,35,35,-50,-45,-46,-49,-31,-32,-33,-34,-35,-36,35,35,-39,-40,-41,-42,-43,-44,-23,-56,35,35,35,35,-56,-56,35,35,35,]),'NE':([2,9,10,11,12,13,14,45,46,47,48,49,50,51,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,83,84,86,88,89,90,91,98,99,113,],[36,-50,-51,-52,-53,-54,-55,-50,36,36,-50,-45,-46,-49,-31,-32,-33,-34,-35,-36,36,36,-39,-40,-41,-42,-43,-44,-23,-56,36,36,36,36,-56,-56,36,36,36,]),'LTE':([2,9,10,11,12,13,14,45,46,47,48,49,50,51,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,83,84,86,88,89,90,91,98,99,113,],[37,-50,-51,-52,-53,-54,-55,-50,37,37,-50,-45,-46,-49,-31,-32,-33,-34,-35,-36,37,37,37,37,-41,-42,-43,-44,-23,-56,37,37,37,37,-56,-56,37,37,37,]),'GTE':([2,9,10,11,12,13,14,45,46,47,48,49,50,51,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,83,84,86,88,89,90,91,98,99,113,],[38,-50,-51,-52,-53,-54,-55,-50,38,38,-50,-45,-46,-49,-31,-32,-33,-34,-35,-36,38,38,38,38,-41,-42,-43,-44,-23,-56,38,38,38,38,-56,-56,38,38,38,]),'GT':([2,9,10,11,12,13,14,45,46,47,48,49,50,51,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,83,84,86,88,89,90,91,98,99,113,],[39,-50,-51,-52,-53,-54,-55,-50,39,39,-50,-45,-46,-49,-31,-32,-33,-34,-35,-36,39,39,39,39,-41,-42,-43,-44,-23,-56,39,39,39,39,-56,-56,39,39,39,]),'LT':([2,9,10,11,12,13,14,45,46,47,48,49,50,51,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,83,84,86,88,89,90,91,98,99,113,],[40,-50,-51,-52,-53,-54,-55,-50,40,40,-50,-45,-46,-49,-31,-32,-33,-34,-35,-36,40,40,40,40,-41,-42,-43,-44,-23,-56,40,40,40,40,-56,-56,40,40,40,]),'INC':([2,9,10,11,12,13,14,45,46,48,49,50,51,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,83,90,91,],[41,-50,-51,-52,-53,-54,-55,-50,41,-50,-45,-46,-49,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-23,-56,-56,-56,]),'DEC':([2,9,10,11,12,13,14,45,46,48,49,50,51,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,83,90,91,],[42,-50,-51,-52,-53,-54,-55,-50,42,-50,-45,-46,-49,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-23,-56,-56,-56,]),'DOT':([9,45,48,],[53,80,82,]),'EQUALS':([9,19,45,60,61,62,63,64,83,90,],[54,58,54,-26,-27,-28,-29,-30,92,92,]),'RPAREN':([10,11,12,13,14,47,48,49,50,51,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,85,86,89,91,99,113,],[-51,-52,-53,-54,-55,81,-50,-45,-46,-49,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-23,93,-16,97,-56,-15,115,]),'SEMICOLON':([10,11,12,13,14,15,19,20,41,42,43,48,49,50,51,52,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,84,88,91,93,98,100,],[-51,-52,-53,-54,-55,55,-21,-22,-47,-48,79,-50,-45,-46,-49,-17,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-23,-25,-24,-56,-14,-13,-18,]),'DELIM':([10,11,12,13,14,48,49,50,51,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,85,86,91,99,],[-51,-52,-53,-54,-55,-50,-45,-46,-49,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-23,94,-16,-56,-15,]),'RCURLY':([16,44,55,60,61,62,63,64,79,95,96,101,103,104,105,107,108,110,114,116,118,119,120,121,],[-7,-6,-5,-26,-27,-28,-29,-30,-4,100,-20,-19,104,-57,-57,-10,-8,-12,116,-11,119,-57,-57,-9,]),'LCURLY':([57,97,109,115,],[87,102,112,117,]),'ELSEIF':([104,119,],[106,106,]),'ELSE':([104,105,107,110,116,119,120,121,],[-57,109,-10,-12,-11,-57,109,-9,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'root':([0,],[1,]),'expression':([0,3,5,6,7,8,27,28,29,30,31,32,33,34,35,36,37,38,39,40,54,56,58,59,92,94,102,103,111,112,114,117,118,],[2,46,47,49,50,51,65,66,67,68,69,70,71,72,73,74,75,76,77,78,84,86,88,89,98,99,46,46,113,46,46,46,46,]),'statements':([0,102,112,117,],[3,103,114,118,]),'empty':([0,104,105,119,120,],[4,107,110,107,110,]),'statement':([0,3,102,103,112,114,117,118,],[15,43,15,43,15,43,15,43,]),'if':([0,3,102,103,112,114,117,118,],[16,44,16,44,16,44,16,44,]),'var_declare':([0,3,87,95,102,103,112,114,117,118,],[19,19,96,101,19,19,19,19,19,19,]),'var_assign':([0,3,102,103,112,114,117,118,],[20,20,20,20,20,20,20,20,]),'print_list':([56,],[85,]),'var_decls':([87,],[95,]),'elseif':([104,119,],[105,120,]),'else':([105,120,],[108,121,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> root","S'",1,None,None,None),
  ('root -> expression','root',1,'p_root','parser.py',17),
  ('root -> statements','root',1,'p_root','parser.py',18),
  ('root -> empty','root',1,'p_root','parser.py',19),
  ('statements -> statements statement SEMICOLON','statements',3,'p_statements','parser.py',25),
  ('statements -> statement SEMICOLON','statements',2,'p_statements','parser.py',26),
  ('statements -> statements if','statements',2,'p_statements','parser.py',27),
  ('statements -> if','statements',1,'p_statements','parser.py',28),
  ('if -> IF LPAREN expression RPAREN LCURLY statements RCURLY elseif else','if',9,'p_if_statement','parser.py',48),
  ('elseif -> ELSEIF LPAREN expression RPAREN LCURLY statements RCURLY elseif else','elseif',9,'p_else_if_statement','parser.py',54),
  ('elseif -> empty','elseif',1,'p_else_if_statement','parser.py',55),
  ('else -> ELSE LCURLY statements RCURLY','else',4,'p_else_statement','parser.py',65),
  ('else -> empty','else',1,'p_else_statement','parser.py',66),
  ('statement -> WORD DOT WORD EQUALS expression','statement',5,'p_struct_update','parser.py',78),
  ('statement -> PRINT LPAREN print_list RPAREN','statement',4,'p_print','parser.py',84),
  ('print_list -> print_list DELIM expression','print_list',3,'p_print_list_second','parser.py',90),
  ('print_list -> expression','print_list',1,'p_print_list_first','parser.py',98),
  ('statement -> WORD WORD','statement',2,'p_struct_dec','parser.py',106),
  ('statement -> STRUCT WORD LCURLY var_decls RCURLY','statement',5,'p_struct_def','parser.py',112),
  ('var_decls -> var_decls var_declare','var_decls',2,'p_var_decls','parser.py',118),
  ('var_decls -> var_declare','var_decls',1,'p_var_decls','parser.py',119),
  ('statement -> var_declare','statement',1,'p_statement','parser.py',132),
  ('statement -> var_assign','statement',1,'p_statement','parser.py',133),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_paren','parser.py',142),
  ('var_assign -> var_declare EQUALS expression','var_assign',3,'p_var_assign','parser.py',149),
  ('var_assign -> WORD EQUALS expression','var_assign',3,'p_var_assign','parser.py',150),
  ('var_declare -> INTNAME WORD','var_declare',2,'p_var_declare','parser.py',161),
  ('var_declare -> DOUBLENAME WORD','var_declare',2,'p_var_declare','parser.py',162),
  ('var_declare -> CHARNAME WORD','var_declare',2,'p_var_declare','parser.py',163),
  ('var_declare -> STRINGNAME WORD','var_declare',2,'p_var_declare','parser.py',164),
  ('var_declare -> BOOLNAME WORD','var_declare',2,'p_var_declare','parser.py',165),
  ('expression -> expression MULTIPLY expression','expression',3,'p_binop','parser.py',171),
  ('expression -> expression DIVIDE expression','expression',3,'p_binop','parser.py',172),
  ('expression -> expression PLUS expression','expression',3,'p_binop','parser.py',173),
  ('expression -> expression MINUS expression','expression',3,'p_binop','parser.py',174),
  ('expression -> expression EXPONENT expression','expression',3,'p_binop','parser.py',175),
  ('expression -> expression MODULUS expression','expression',3,'p_binop','parser.py',176),
  ('expression -> expression AND expression','expression',3,'p_binop','parser.py',177),
  ('expression -> expression OR expression','expression',3,'p_binop','parser.py',178),
  ('expression -> expression EQ expression','expression',3,'p_binop','parser.py',179),
  ('expression -> expression NE expression','expression',3,'p_binop','parser.py',180),
  ('expression -> expression LTE expression','expression',3,'p_binop','parser.py',181),
  ('expression -> expression GTE expression','expression',3,'p_binop','parser.py',182),
  ('expression -> expression GT expression','expression',3,'p_binop','parser.py',183),
  ('expression -> expression LT expression','expression',3,'p_binop','parser.py',184),
  ('expression -> PLUS expression','expression',2,'p_binop_single','parser.py',190),
  ('expression -> MINUS expression','expression',2,'p_binop_single','parser.py',191),
  ('statement -> expression INC','statement',2,'p_unop','parser.py',198),
  ('statement -> expression DEC','statement',2,'p_unop','parser.py',199),
  ('expression -> NOT expression','expression',2,'p_not','parser.py',206),
  ('expression -> WORD','expression',1,'p_expression_var','parser.py',213),
  ('expression -> INT','expression',1,'p_expression','parser.py',219),
  ('expression -> DOUBLE','expression',1,'p_expression','parser.py',220),
  ('expression -> CHAR','expression',1,'p_expression','parser.py',221),
  ('expression -> STRING','expression',1,'p_expression','parser.py',222),
  ('expression -> BOOL','expression',1,'p_expression','parser.py',223),
  ('expression -> WORD DOT WORD','expression',3,'p_struct_access','parser.py',250),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',261),
]
